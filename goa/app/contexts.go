// Code generated by goagen v1.1.0-dirty, command line:
// $ goagen
// --design=github.com/couchbase/cbbootstrap/design
// --out=$(GOPATH)/src/github.com/couchbase/cbbootstrap/goa
// --version=v1.0.0
//
// API "cbbootstrap": Application Contexts
//
// The content of this file is auto-generated, DO NOT MODIFY

package app

import (
	"github.com/goadesign/goa"
	"golang.org/x/net/context"
	"net/http"
)

// CreateOrJoinClusterContext provides the cluster create_or_join action context.
type CreateOrJoinClusterContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Payload *CreateOrJoinClusterPayload
}

// NewCreateOrJoinClusterContext parses the incoming request URL and body, performs validations and creates the
// context used by the cluster controller create_or_join action.
func NewCreateOrJoinClusterContext(ctx context.Context, r *http.Request, service *goa.Service) (*CreateOrJoinClusterContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := CreateOrJoinClusterContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *CreateOrJoinClusterContext) OK(r *Couchbasecluster) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.couchbasecluster+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// StatusClusterContext provides the cluster status action context.
type StatusClusterContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ClusterID string
}

// NewStatusClusterContext parses the incoming request URL and body, performs validations and creates the
// context used by the cluster controller status action.
func NewStatusClusterContext(ctx context.Context, r *http.Request, service *goa.Service) (*StatusClusterContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := StatusClusterContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramClusterID := req.Params["cluster_id"]
	if len(paramClusterID) > 0 {
		rawClusterID := paramClusterID[0]
		rctx.ClusterID = rawClusterID
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *StatusClusterContext) OK(r *Couchbasecluster) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.couchbasecluster+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}
